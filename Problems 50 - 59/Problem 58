/*

Starting with 1 and spiralling anticlockwise in the following way, 
a square spiral with side length 7 is formed.

37* 36 35 34 33 32 31*
38 17* 16 15 14 13* 30
39 18  5*  4  3* 12 29
40 19  6  1  2 11 28
41 20  7*  8  9 10 27
42 21 22 23 24 25 26
43* 44 45 46 47 48 49

It is interesting to note that the odd squares lie along the bottom right diagonal, 
but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 â‰ˆ 62%.

If one complete new layer is wrapped around the spiral above, 
a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?

*/

import time, math, string, sympy 
import numpy as np
import scipy
start = time.time()

def bottom_right_diagonal(i):
    increment = (i-2)*(i-2)+((i-1))
    return increment

def top_right_diagonal(i):
    increment = (i-2)*(i-2)+((i-1))*4
    return increment

def top_left_diagonal(i):
    increment = (i-2)*(i-2)+((i-1))*3
    return increment

def bottom_left_diagonal(i):
    increment = (i-2)*(i-2)+((i-1))*2
    return increment


def main():
    primes = 0
    nonprimes = 1
    
    for x in range(3,1000000,2):
        Side = 0
        if sympy.isprime(bottom_left_diagonal(x)) == True:
            Side += 1
        if sympy.isprime(bottom_right_diagonal(x)) == True:
            Side += 1
        if sympy.isprime(top_left_diagonal(x)) == True:
            Side += 1
        if sympy.isprime(top_right_diagonal(x)) == True:
            Side += 1
        primes += Side
        nonprimes += 4 - Side
        ratio = primes / (primes + nonprimes)
        if ratio <= .1:
            break
            
    Final = x  
    elapsed = time.time() - start
    Printed = "found {} in {} seconds".format(Final,elapsed)
    return Printed
    
if __name__ == "__main__":
    print(main())
