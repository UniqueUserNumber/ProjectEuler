/*

I am not reformatting
https://projecteuler.net/problem=69

Euler's Totient function, φ(n) [sometimes called the phi function], 
is used to determine the number of numbers less than n which are relatively prime to n. 
For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.

n	Relatively Prime	φ(n)	n/φ(n)
2	1	1	2
3	1,2	2	1.5
4	1,3	2	2
5	1,2,3,4	4	1.25
6	1,5	2	3
7	1,2,3,4,5,6	6	1.1666...
8	1,3,5,7	4	2
9	1,2,4,5,7,8	6	1.5
10	1,3,7,9	4	2.5
It can be seen that n=6 produces a maximum n/φ(n) for n ≤ 10.

Find the value of n ≤ 1,000,000 for which n/φ(n) is a maximum.

*/

import time, math, string, sympy 
import numpy as np
import scipy
import math, fractions
start = time.time()


def Euler_Totients(n):
	Tots = list(range((n + 1))) #if range is (1,n+1), it will fail.
	for i in range(2, len(Tots)):
		if Tots[i] == i:  
			for j in range(i, len(Tots), i):
				Tots[j] -= Tots[j] // i
	return Tots


def main():
    solution = 0
    maxNum = 0
    tot_list = Euler_Totients(1000000)
    for i in range(2,1000000):
        apples = fractions.Fraction(i, tot_list[i])
        if apples > maxNum:
            maxNum = apples
            solution = i
    Final = solution
    elapsed = time.time() - start
    Printed = "found {} in {} seconds".format(Final,elapsed)                
    return Printed
    
if __name__ == "__main__":
    print(main())
